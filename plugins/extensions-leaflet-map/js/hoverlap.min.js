function leafext_is_point_in_layer(map,point,layer){turfpoint=turf.helpers.point([point.lng,point.lat]);let debug=false;if(layer instanceof L.Circle){if(debug){console.log("leafext_is_point_in_layer is L.Circle")}let center=layer.getLatLng();let radius=layer.getRadius();if(center.distanceTo(point)<radius){if(debug){console.log("ist drin")}return true}}else if(layer instanceof L.Polyline&&!(layer instanceof L.Polygon)){if(debug){console.log("leafext_is_point_in_layer is L.Polyline")}if(L.GeometryUtil.closest(map,layer,point).distance<5){if(debug){console.log("ist drin")}return true}}else if(layer instanceof L.Polygon){if(debug){console.log("leafext_is_point_in_layer is L.Polygon")}if(turf.booleanPointInPolygon(turfpoint,layer.toGeoJSON())){if(debug){console.log("ist drin")}return true}}else if(layer instanceof L.Path){if(debug){console.log("leafext_is_point_in_layer is L.Path")}let center=layer.getLatLng();let radius=layer.getRadius();var elements=[];elements.push(new L.Marker(center));let result=L.GeometryUtil.layersWithin(map,elements,point,radius);if(result.length>0){if(debug){console.log("ist drin")}return true}}else if(layer instanceof L.Marker){if(debug){console.log("leafext_is_point_in_layer is L.Marker")}}else if(layer.type=="MultiPolygon"||layer.type=="Polygon"){if(debug){console.log("leafext_is_point_in_layer is MultiPolygon or Polygon")}if(turf.booleanPointInPolygon(turfpoint,layer)){if(debug){console.log("ist drin")}return true}}else if(layer.type=="LineString"){if(debug){console.log("leafext_is_point_in_layer is LineString")}let polylatlngs=[];var length=layer.coordinates.length;for(var i=0;i<length;i++){polylatlngs.push([layer.coordinates[i][1],layer.coordinates[i][0]])}var polyline=L.polyline(polylatlngs);if(L.GeometryUtil.closest(map,polyline,point).distance<5){if(debug){console.log("ist drin")}return true}}else if(layer.type=="Point"){if(debug){console.log("leafext_is_point_in_layer is Point")}}else if(layer.feature&&layer.feature.geometry&&layer.feature.geometry.type=="GeometryCollection"){if(debug){console.log("leafext_is_point_in_layer is GeometryCollection")}turf.meta.flattenEach(layer.toGeoJSON(),function(currentFeature,featureIndex,multiFeatureIndex){if(debug){console.log("leafext_is_point_in_layer is in GeometryCollection",currentFeature.geometry.type)}if(leafext_is_point_in_layer(map,point,currentFeature.geometry)){if(debug){console.log("ist drin")}return true}})}else if(layer.feature&&layer.feature.geometry&&layer.feature.geometry.type=="MultiPoint"){if(debug){console.log("leafext_is_point_in_layer is MultiPoint")}}else{if(debug){console.log("leafext_is_point_in_layer is other layer")}if(debug){console.log(layer)}}if(debug){console.log("ist nicht drin")}return false}function leafext_marker_click(e,map,map_id,layer,all_options){let event=e.type;var mouselayers=[];if(event=="click"){overlaplayers[map_id].eachLayer(function(layer){leafext_make_styleback(layer)})}overlaplayers[map_id].eachLayer(function(layer){if(leafext_is_point_in_layer(map,e.latlng,layer)){if(event=="click"){leafext_make_overstyle(layer)}if(layer.getPopup().getContent()){mouselayers.push(layer.getPopup().getContent())}}});if(layer.options.popupContent){mouselayers.push(layer.options.popupContent)}leafext_close_tooltips(map);let ele_popup_open=false;if(e.sourceTarget.getPopup()){if(e.sourceTarget.getPopup().isOpen()){ele_popup_open=true}}if(event=="mouseover"&&leafext_map_popups(map)==false&&ele_popup_open==false){e.sourceTarget.unbindTooltip();e.sourceTarget.bindTooltip(mouselayers.join("<br>"),{className:all_options["class"]});e.sourceTarget.openTooltip(e.latlng)}if(event=="click"){e.sourceTarget.bindTooltip("",{visibility:"hidden",opacity:0}).closeTooltip();e.sourceTarget.bindPopup(mouselayers.join("<br>"));e.sourceTarget.openPopup()}}function leafext_hoverlap_js(all_options){var map=window.WPLeafletMapPlugin.getCurrentMap();var map_id=map._leaflet_id;var maps=[];maps[map_id]=map;if(typeof overlaplayers=="undefined"){overlaplayers=[]}if(typeof overlaplayers[map_id]=="undefined"){overlaplayers[map_id]=new L.LayerGroup;overlaplayers[map_id].addTo(map)}var markergroups=window.WPLeafletMapPlugin.markergroups;Object.entries(markergroups).forEach(([key,value])=>{if(markergroups[key]._map!==null){if(map_id==markergroups[key]._map._leaflet_id){markergroups[key].eachLayer(function(layer){if(layer.getPopup()){if(layer.getPopup().getContent()){layer.options.popupContent=layer.getPopup().getContent()}}if(layer instanceof L.Marker){layer.on("mouseover click",function(e){leafext_marker_click(e,map,map_id,layer,all_options)})}else if(layer instanceof L.Polygon||layer instanceof L.Circle||layer instanceof L.Polyline){overlaplayers[map_id].addLayer(layer);layer.off("click")}else{}})}}});var geojsons=window.WPLeafletMapPlugin.geojsons;var geocount=geojsons.length;for(var j=0,len=geocount;j<len;j++){var geojson=geojsons[j];if(map_id==geojsons[j]._map._leaflet_id){let exclude=-1;if(all_options["exclude"]!==""){exclude=geojson._url.indexOf(all_options["exclude"])}if(exclude==-1){geojson.on("ready",function(e){e.target.eachLayer(function(layer){console.log(layer.feature.geometry.type);if(layer.feature.geometry.type=="GeometryCollection"){turf.meta.flattenEach(layer.toGeoJSON(),function(currentFeature,featureIndex,multiFeatureIndex){if(layer.getPopup()){layer.options.popupContent=layer.getPopup().getContent()}if(currentFeature.geometry.type=="Point"||currentFeature.geometry.type=="MultiPoint"){}else{overlaplayers[map_id].addLayer(layer);layer.off("click")}});layer.eachLayer(function(geometry){if(geometry instanceof L.Path==true&&geometry instanceof L.Polygon==false){if(layer.options.popupContent){geometry.bindPopup(layer.options.popupContent);geometry.options.popupContent=layer.options.popupContent;overlaplayers[map_id].addLayer(geometry)}geometry.off("click")}else if(geometry instanceof L.Point||geometry instanceof L.Marker){if(layer.options.popupContent){geometry.bindPopup(layer.options.popupContent);geometry.options.popupContent=layer.options.popupContent;geometry.off("click");layer.off("click");geometry.on("mouseover click",function(e){leafext_marker_click(e,map,map_id,geometry,all_options)})}}})}else if(layer.feature.geometry.type=="Point"){if(layer instanceof L.Marker){if(layer.getPopup()){layer.options.popupContent=layer.getPopup().getContent();layer.on("mouseover click",function(e){leafext_marker_click(e,map,map_id,layer,all_options)})}}else{overlaplayers[map_id].addLayer(layer);layer.off("click")}}else if(layer.feature.geometry.type=="MultiPoint"){layer.eachLayer(function(point){if(point instanceof L.Marker==true){layer.off("click");if(layer.getPopup()){point.bindPopup(layer.getPopup().getContent());point.options.popupContent=layer.getPopup().getContent();point.off("click");point.on("mouseover click",function(e){leafext_marker_click(e,map,map_id,point,all_options)})}}else{if(layer.getPopup()){point.bindPopup(layer.getPopup().getContent());overlaplayers[map_id].addLayer(point);point.off("click")}}})}else{if(layer.getPopup()){layer.options.popupContent=layer.getPopup().getContent();layer.off("click");overlaplayers[map_id].addLayer(layer)}}})})}else{geojson.layer.on("mouseout",function(){this.bringToBack()})}}}map.on("mousemove click",function(e){if(!leafext_map_popups(map)){var latlng=e.latlng;var containerPoint=e.containerPoint;overlaplayers[map_id].eachLayer(function(layer){leafext_make_styleback(layer)});overlaplayers[map_id].eachLayer(function(layer){if(layer.feature&&layer.feature.geometry&&layer.feature.geometry.type){if(layer.feature.geometry.type=="GeometryCollection"){turf.meta.flattenEach(layer.toGeoJSON(),function(currentFeature,featureIndex,multiFeatureIndex){if(leafext_is_point_in_layer(map,latlng,currentFeature.geometry)){leafext_make_overstyle(layer)}})}else{if(leafext_is_point_in_layer(map,latlng,layer)){leafext_make_overstyle(layer)}}}else{overlaplayers[map_id].eachLayer(function(layer){if(leafext_is_point_in_layer(map,latlng,layer)){leafext_make_overstyle(layer)}})}})}});map.on("mousemove click",function(e){let event=e.type;var latlng=e.latlng;var mouselayers=[];overlaplayers[map_id].eachLayer(function(layer){if(layer.feature&&layer.feature.geometry&&layer.feature.geometry.type){if(layer.feature.geometry.type=="GeometryCollection"){turf.meta.flattenEach(layer.toGeoJSON(),function(currentFeature,featureIndex,multiFeatureIndex){if(leafext_is_point_in_layer(map,latlng,currentFeature.geometry)){if(layer.getPopup().getContent()){mouselayers.push(layer.getPopup().getContent())}}})}else{if(leafext_is_point_in_layer(map,latlng,layer)){if(layer.getPopup().getContent()){mouselayers.push(layer.getPopup().getContent())}}}}else{if(leafext_is_point_in_layer(map,latlng,layer)){if(layer.getPopup().getContent()){mouselayers.push(layer.getPopup().getContent())}}}});if(!leafext_map_popups(map)&&event=="mousemove"&&!leafext_markertooltip(map)){leafext_close_tooltips(map);if(mouselayers.length>0){var tooltip=L.tooltip({className:all_options["class"]}).setLatLng(latlng).setContent(mouselayers.join("<br>")).openOn(map)}}if(event=="click"){leafext_close_tooltips(map);if(mouselayers.length>0){var popup=L.popup().setLatLng(latlng).setContent(mouselayers.join("<br>")).openOn(map)}}});map.on("popupclose",function(e){overlaplayers[map_id].eachLayer(function(layer){leafext_make_styleback(layer)})})}function leafext_close_tooltips(map){map.eachLayer(function(layer){if(layer.options.pane==="tooltipPane"){layer.removeFrom(map)}})}function leafext_markertooltip(map){var markertooltip=false;map.eachLayer(function(layer){if(layer.options.pane==="tooltipPane"){markertooltip=layer._source instanceof L.Marker}});return markertooltip}
